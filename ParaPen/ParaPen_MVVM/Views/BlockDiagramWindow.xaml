<Window x:Class="ParaPen.Views.BlockDiagramWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:gc="clr-namespace:GraphSharp.Controls;assembly=GraphSharp.Controls"
        xmlns:local="clr-namespace:ParaPen.Views" 

		xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"

		xmlns:mv="clr-namespace:ParaPen.ModelViews"
		xmlns:cg="clr-namespace:ParaPen.Models.CustomGraph"
		xmlns:bn="clr-namespace:ParaPen.Models.CustomGraph.BlockNodes"
		xmlns:convs="clr-namespace:ParaPen.Converters"
		xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
		
		mc:Ignorable="d"
        Title="BlockDiagramWindow" Height="450" Width="800"
        x:Name="root"
		
		xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
		TextElement.Foreground="{DynamicResource MaterialDesignBody}"
		TextElement.FontWeight="Regular"
		TextElement.FontSize="13"
		TextOptions.TextFormattingMode="Ideal"
		TextOptions.TextRenderingMode="Auto"
		FontFamily="{DynamicResource MaterialDesignFont}"
		>


	<Window.Resources>
		<convs:IsItemBlockPenContainerConverter x:Key="IsItemBlockPenContainerConverter"/>
		<convs:IsBlockPenContainersInLimitConverter x:Key="IsBlockPenContainersInLimitConverter"/>

		<!-- Вид вершин -->
		<DataTemplate DataType="{x:Type bn:BlockNode}">
			<Border BorderThickness="1">
				<Border.Style>
					<Style TargetType="Border">
						<!--<Setter Property="BorderBrush" Value="Black"/>
						<Setter Property="BorderThickness" Value="1"/>-->
						<Style.Triggers>
							<!-- Поведение при IsHighlighted = true -->
							<DataTrigger Binding="{Binding IsHighlighted}" Value="True">
								<Setter Property="BorderBrush" Value="Orange"/>
								<!-- FIXME: Утолщение рамки не происходит -->
								<Setter Property="BorderThickness" Value="4"/>
							</DataTrigger>
							<!-- Поведение при IsHighlighted = false -->
							<DataTrigger Binding="{Binding IsHighlighted}" Value="False">
								<Setter Property="BorderBrush" Value="Black"/>
								<!-- FIXME: Утолщение рамки не происходит -->
								<Setter Property="BorderThickness" Value="2"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</Border.Style>
				<TextBlock Text="{Binding Label}" 
                   HorizontalAlignment="Center" 
                   VerticalAlignment="Center"/>
			</Border>
		</DataTemplate>

		<DataTemplate DataType="{x:Type bn:TerminalNode}">
			<Border BorderThickness="1" CornerRadius="5">
				<Border.Style>
					<Style TargetType="Border">
						<!--<Setter Property="BorderBrush" Value="Black"/>
						<Setter Property="BorderThickness" Value="1"/>-->
						<Style.Triggers>
							<!-- Поведение при IsHighlighted = true -->
							<DataTrigger Binding="{Binding IsHighlighted}" Value="True">
								<Setter Property="BorderBrush" Value="Orange"/>
								<!-- FIXME: Утолщение рамки не происходит -->
								<Setter Property="BorderThickness" Value="4"/>
							</DataTrigger>
							<!-- Поведение при IsHighlighted = false -->
							<DataTrigger Binding="{Binding IsHighlighted}" Value="False">
								<Setter Property="BorderBrush" Value="Black"/>
								<!-- FIXME: Утолщение рамки не происходит -->
								<Setter Property="BorderThickness" Value="2"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</Border.Style>
				<TextBlock Text="{Binding Label}" 
                   HorizontalAlignment="Center" 
                   VerticalAlignment="Center"/>
			</Border>
		</DataTemplate>

		<DataTemplate DataType="{x:Type bn:InkConditionNode}">
			<Grid>
				<!-- Задаем размеры ромба -->
				<Viewbox Width="100" Height="20">
					<!-- Используем Path для создания ромба -->
					<Path Data="M 50,0 L 100,10 L 50,20 L 0,10 Z"
                  StrokeThickness="1"
                  Fill="Transparent">
						<Path.Style>
							<Style TargetType="Path">
								<Style.Triggers>
									<!-- Поведение при IsHighlighted = true -->
									<DataTrigger Binding="{Binding IsHighlighted}" Value="True">
										<Setter Property="Stroke" Value="Orange"/>
										<Setter Property="StrokeThickness" Value="4"/>
									</DataTrigger>
									<!-- Поведение при IsHighlighted = false -->
									<DataTrigger Binding="{Binding IsHighlighted}" Value="False">
										<Setter Property="Stroke" Value="Black"/>
										<Setter Property="StrokeThickness" Value="1"/>
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</Path.Style>
					</Path>
				</Viewbox>
				<!-- Текст внутри ромба -->
				<TextBlock Text="{Binding Label}"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"/>
			</Grid>
		</DataTemplate>

		<DataTemplate DataType="{x:Type bn:SubprogramNode}">
			<Border BorderThickness="1">
				<Border.Style>
					<Style TargetType="Border">
						<Style.Triggers>
							<DataTrigger Binding="{Binding IsHighlighted}" Value="True">
								<Setter Property="BorderBrush" Value="Orange"/>
								<Setter Property="BorderThickness" Value="4"/>
							</DataTrigger>
							<DataTrigger Binding="{Binding IsHighlighted}" Value="False">
								<Setter Property="BorderBrush" Value="Black"/>
								<Setter Property="BorderThickness" Value="2"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</Border.Style>
				<Grid>
					<!-- Основное содержимое -->
					<TextBlock Text="{Binding Label}" 
                       HorizontalAlignment="Center" 
                       VerticalAlignment="Center"/>
					<!-- Дополнительная полоска слева -->
					<Rectangle Width="1" HorizontalAlignment="Left" Fill="Black" Margin="5,0,0,0"/>
					<!-- Дополнительная полоска справа -->
					<Rectangle Width="1" HorizontalAlignment="Right" Fill="Black" Margin="0,0,5,0"/>
				</Grid>
			</Border>
		</DataTemplate>

		<!--<DataTemplate DataType="{x:Type bn:CountingLoopNode}">
			<Grid HorizontalAlignment="Center" VerticalAlignment="Center">
				<Canvas VerticalAlignment="Center" HorizontalAlignment="Center">
					<Polygon Points="0,0 20,-20 80,-20 100,0 80,20 20,20"
                 Stroke="Black"
                 Fill="Transparent"/>
				</Canvas>
				<TextBlock Text="{Binding Label}" 
                   HorizontalAlignment="Center" 
                   VerticalAlignment="Center"/>
			</Grid>
		</DataTemplate>-->

		<!--<DataTemplate DataType="{x:Type gc:EdgeControl}">
			<i:Interaction.Triggers>
				<i:EventTrigger EventName="MouseLeftButtonDown">
					<i:InvokeCommandAction Command="{Binding RectangleDoubleClickCommand}"
                                           CommandParameter="{Binding RelativeSource={RelativeSource Mode=Self}}" />
				</i:EventTrigger>
			</i:Interaction.Triggers>
		</DataTemplate>-->

		<!-- Для рёбер -->

		<!--<Style TargetType="gc:EdgeControl">
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Foreground" Value="Red" />
					<Setter Property="Cursor" Value="Hand" />
				</Trigger>
			</Style.Triggers>
		</Style>-->


		<Style TargetType="{x:Type gc:EdgeControl}">
			<!-- fixme не работает -->
			<!--
			<Style.Resources>
				<ToolTip x:Key="ToolTipContent">
					<StackPanel>
						<TextBlock Text="Kanten Information"/>
					</StackPanel>
				</ToolTip>
			</Style.Resources>
			<Setter Property="ToolTip" Value="{StaticResource ToolTipContent}"/>-->


			<Style.Triggers>
				<!-- Ребро	зелёное: `Value=true`
							красное: `Value=false` -->
				<MultiDataTrigger>
					<MultiDataTrigger.Conditions>
						<Condition Binding="{Binding Value}" Value="True"/>
					</MultiDataTrigger.Conditions>
					<Setter Property="Foreground" Value="Green"/>
				</MultiDataTrigger>
				<MultiDataTrigger>
					<MultiDataTrigger.Conditions>
						<Condition Binding="{Binding Value}" Value="False"/>
					</MultiDataTrigger.Conditions>
					<Setter Property="Foreground" Value="Red"/>
				</MultiDataTrigger>

				<!-- NOTE Не видно при включённой подсветке GraphSharp -->
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Foreground" Value="Red" />
					<Setter Property="Cursor" Value="Hand" />
				</Trigger>
				<!-- Отображение петли -->
				<!--<DataTrigger Binding="{Binding IsLooped}" Value="True">
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type gc:EdgeControl}">
								 -->
				<!--fixme не следует за вершиной, так как RenderTransform не уведомляет по умолчанию о своём изменении-->
				<!--
								<Ellipse Margin="{Binding RelativeSource={RelativeSource AncestorType={x:Type gc:EdgeControl}}, Path=Source.Margin}"
                         Stroke="Black" 
                         Width="20" Height="20"/>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</DataTrigger>-->
			</Style.Triggers>
		</Style>

		<Style TargetType="DataGrid">
			<Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
		</Style>

		<Style TargetType="Controls:Flyout">
			<Setter Property="CloseButtonVisibility" Value="Collapsed"/>
		</Style>

		<Style x:Key="ArrowButtonStyle" TargetType="Button">
			<Setter Property="Content">
				<Setter.Value>
					<Path Data="M 0 0 L 4 4 L 8 0 Z" Fill="Black" Width="8" Height="4"/>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsEnabled" Value="False">
					<Setter Property="Opacity" Value="0.5"/>
				</Trigger>
			</Style.Triggers>
		</Style>

	</Window.Resources>

	<Grid>
		<!-- EfficientSugiyama   -->
		<gc:GraphLayout x:Name="graphLayout" 
						Graph="{Binding BlockDiagram}"
						LayoutAlgorithmType="EfficientSugiyama"
						OverlapRemovalAlgorithmType="TwoLayerFSA"
					    PreviewMouseLeftButtonDown="graphLayout_PreviewMouseLeftButtonDown"
						PreviewMouseRightButtonDown="graphLayout_PreviewMouseRightButtonDown"
						HighlightAlgorithmType="Simple"
						/>

		<!--  -->
		<!--<ListBox x:Name="blockPenContainersLB" 
				 Height="100"
				 Width="100"
				 HorizontalAlignment="Right"
				 ItemsSource="{Binding BlockPenContainers}"
				 >
			<ListBox.ItemTemplate>
				<DataTemplate>
					<TextBlock Text="{Binding Label}" />
					-->
		<!-- Замените YourItemProperty на свойство вашего объекта BlockPenContainer -->
		<!--
				</DataTemplate>
			</ListBox.ItemTemplate>
		</ListBox>-->
		<Controls:Flyout x:Name="blockPenContainersFlyout"
                         Position="Right"
                         VerticalAlignment="Center"
						 HorizontalAlignment="Right"
						 Height="Auto"
						 Width="Auto"
                         Theme="Accent"
						 >
			<Grid>
				<ListBox x:Name="blockPenContainersLB" 
						 ItemsSource="{Binding BlockPenContainers}"
						 BorderThickness="0"
						 Background="{DynamicResource MaterialDesignPaper}"
						 ScrollViewer.HorizontalScrollBarVisibility="Auto"
						 >
					<ListBox.ItemTemplate>
						<DataTemplate>
							<TextBlock Text="{Binding Label}" 
									   Margin="10"
									   VerticalAlignment="Center"
									   Foreground="{DynamicResource MaterialDesignBody}"
									   FontSize="16"/>
						</DataTemplate>
					</ListBox.ItemTemplate>
				</ListBox>

				<StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,10">
					<Button Content="Serialize"
							Command="{Binding SerializeEdges}"
							CommandParameter="{Binding SelectedItem, ElementName=blockPenContainersLB}"
							IsEnabled="{Binding SelectedItem, ElementName=blockPenContainersLB, Converter={StaticResource IsItemBlockPenContainerConverter}}"
							Margin="5,0"
							Style="{DynamicResource MaterialDesignFlatButton}"
							Background="CornflowerBlue"
							/>
					<!-- BUG Кнопка не перестаёт быть активной при выход за лимит -->
					<Button Content="Add" 
							Command="{Binding AddBlockPenContainer}"
							IsEnabled="{Binding BlockPenContainers, Converter={StaticResource IsBlockPenContainersInLimitConverter}}"
							Margin="5,0"
							Style="{DynamicResource MaterialDesignFlatButton}"
							Background="LightGreen"
							/>
					<Button Content="Delete" 
							CommandParameter="{Binding SelectedItem, ElementName=blockPenContainersLB}" 
							Command="{Binding DeleteBlockPenContainer}"
							IsEnabled="{Binding SelectedItem, ElementName=blockPenContainersLB, Converter={StaticResource IsItemBlockPenContainerConverter}}"
							Margin="5,0"
							Style="{DynamicResource MaterialDesignFlatButton}"
							Background="IndianRed"
							/>
				</StackPanel>
			</Grid>
		</Controls:Flyout>




		<Controls:Flyout x:Name="tracebackFlyout"
                 Position="Left"
                 VerticalAlignment="Center"
                 HorizontalAlignment="Left"
                 Height="320"
                 Width="300"
                 Theme="Accent">
			<Controls:Flyout.Resources>
				<SolidColorBrush x:Key="FlyoutBackground" Color="{DynamicResource MaterialDesignPaper}"/>
			</Controls:Flyout.Resources>
			<Grid Background="{StaticResource FlyoutBackground}">
				<DataGrid x:Name="tracebackTable" 
						  ItemsSource="{Binding Tracebacker.Items}" 
						  HorizontalAlignment="Stretch"
						  VerticalAlignment="Stretch"
						  Background="Transparent"
						  AlternatingRowBackground="{DynamicResource MaterialDesignPaper}"
						  RowBackground="{DynamicResource MaterialDesignPaper}"
						  CellStyle="{DynamicResource MaterialDesignDataGridCell}"
						  RowHeaderStyle="{DynamicResource MaterialDesignDataGridRowHeader}"
						  ColumnHeaderStyle="{DynamicResource MaterialDesignDataGridColumnHeader}"
						  BorderBrush="{DynamicResource MaterialDesignDivider}"
						  />
			</Grid>
		</Controls:Flyout>




		<!-- -->



		<Grid VerticalAlignment="Top" Margin="0,20,0,0">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto"/>
				<!-- Кнопка Traceback (слева) -->
				<ColumnDefinition Width="*"/>
				<!-- Кнопки Step, All, Break (по центру) -->
				<ColumnDefinition Width="Auto"/>
				<!-- Кнопка Containers (справа) -->
			</Grid.ColumnDefinitions>

			<!-- Кнопка Traceback (слева) -->
			<Button Content="Traceback"
					Click="Button_Click_1" 
					Style="{DynamicResource MaterialDesignFlatSecondaryDarkButton}"
					Background="LightGray"
					HorizontalAlignment="Left"
					Margin="20,0,0,0"
					/>

			<!-- Кнопки Step, All, Break (по центру) -->
			<StackPanel Orientation="Horizontal" Grid.Column="1" HorizontalAlignment="Center">
				<Button Content="Step"
						Command="{Binding ExecuteAndGoToNextNodesCommand}" 
						Width="Auto" 
						Margin="5,0"
						Style="{DynamicResource MaterialDesignFlatButton}"
						Background="PaleGreen"
						/>
				<Button Content="All" 
						Command="{Binding ExecuteAllNodesCommand}" 
						Width="Auto"
						Margin="5,0"
						Style="{DynamicResource MaterialDesignFlatButton}"
						Background="CornflowerBlue"
						/>
				<Button Content="Break" 
						Command="{Binding BreakExecutionCommand}" 
						Width="Auto" 
						Margin="5,0"
						Style="{DynamicResource MaterialDesignFlatButton}"
						Background="IndianRed"
						/>
			</StackPanel>

			<!-- Кнопка Containers (справа) -->
			<Button Content="Containers"
					Click="Button_Click" 
					Style="{DynamicResource MaterialDesignFlatSecondaryDarkButton}"
					Background="LightGray"
					HorizontalAlignment="Right"
					Grid.Column="2"
					Margin="0,0,20,0"
					/>
		</Grid>
	</Grid>
</Window>
